// <auto-generated />
using System;
using Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PromotionEngineContext))]
    partial class PromotionEngineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infrastructure.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(62)")
                        .HasMaxLength(62)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(2048)")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Username")
                        .HasName("PK_Account_1");

                    b.HasIndex("BrandId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Infrastructure.Models.Action", b =>
                {
                    b.Property<Guid>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BundlePrice")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<int?>("BundleQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("BundleStrategy")
                        .HasColumnType("int");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("DiscountQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("FixedPrice")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("LadderPrice")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<decimal?>("MinPriceAfter")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("OrderLadderProduct")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ActionId");

                    b.HasIndex("BrandId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("Infrastructure.Models.ActionProductMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ActionProductMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("BrandEmail")
                        .HasColumnType("varchar(62)")
                        .HasMaxLength(62)
                        .IsUnicode(false);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(2048)")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandCode")
                        .IsUnique()
                        .HasName("Brand_UN");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Infrastructure.Models.Channel", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApiKey")
                        .HasColumnType("varchar(44)")
                        .HasMaxLength(44)
                        .IsUnicode(false);

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ChannelType")
                        .HasColumnType("int");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<int?>("Group")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("varchar(2240)")
                        .HasMaxLength(2240)
                        .IsUnicode(false);

                    b.Property<string>("PublicKey")
                        .HasColumnType("varchar(600)")
                        .HasMaxLength(600)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ChannelId");

                    b.HasIndex("BrandId");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("Infrastructure.Models.ConditionGroup", b =>
                {
                    b.Property<Guid>("ConditionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ConditionRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("NextOperator")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ConditionGroupId");

                    b.HasIndex("ConditionRuleId");

                    b.ToTable("ConditionGroup");
                });

            modelBuilder.Entity("Infrastructure.Models.ConditionRule", b =>
                {
                    b.Property<Guid>("ConditionRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ConditionRuleId");

                    b.HasIndex("BrandId");

                    b.ToTable("ConditionRule");
                });

            modelBuilder.Entity("Infrastructure.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DeviceId");

                    b.HasIndex("StoreId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Infrastructure.Models.GameCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndGame")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExpiredDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("GameMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasCode")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SecretCode")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartGame")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("GameMasterId");

                    b.HasIndex("PromotionId");

                    b.ToTable("GameCampaign");
                });

            modelBuilder.Entity("Infrastructure.Models.GameItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(2048)")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ItemColor")
                        .HasColumnType("char(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("PromotionTierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextColor")
                        .HasColumnType("char(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameItems");
                });

            modelBuilder.Entity("Infrastructure.Models.GameMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MaxItem")
                        .HasColumnType("int");

                    b.Property<int>("MinItem")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("GameMaster");
                });

            modelBuilder.Entity("Infrastructure.Models.Gift", b =>
                {
                    b.Property<Guid>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("BonusPoint")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GameCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GiftVoucherGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PostActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GiftId");

                    b.HasIndex("BrandId");

                    b.HasIndex("GameCampaignId");

                    b.ToTable("Gift");
                });

            modelBuilder.Entity("Infrastructure.Models.GiftProductMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GiftId");

                    b.HasIndex("ProductId");

                    b.ToTable("GiftProductMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.MemberLevel", b =>
                {
                    b.Property<Guid>("MemberLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MemberLevelId");

                    b.HasIndex("BrandId");

                    b.ToTable("MemberLevel");
                });

            modelBuilder.Entity("Infrastructure.Models.MemberLevelMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("MemberLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("PromotionId");

                    b.ToTable("MemberLevelMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.Membership", b =>
                {
                    b.Property<Guid>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(62)")
                        .HasMaxLength(62)
                        .IsUnicode(false);

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MembershipId");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Infrastructure.Models.OrderCondition", b =>
                {
                    b.Property<Guid>("OrderConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<string>("AmountOperator")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<Guid>("ConditionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<int>("IndexGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("NextOperator")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuantityOperator")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderConditionId");

                    b.HasIndex("ConditionGroupId");

                    b.ToTable("OrderCondition");
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<Guid>("ProductCateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCateId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CateId")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductCateId");

                    b.HasIndex("BrandId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCondition", b =>
                {
                    b.Property<Guid>("ProductConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ConditionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<int>("IndexGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("NextOperator")
                        .HasColumnType("int");

                    b.Property<int>("ProductConditionType")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("QuantityOperator")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductConditionId");

                    b.HasIndex("ConditionGroupId");

                    b.ToTable("ProductCondition");
                });

            modelBuilder.Entity("Infrastructure.Models.ProductConditionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("ProductConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ProductConditionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductConditionMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.Promotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("ApplyBy")
                        .HasColumnType("int");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayFilter")
                        .HasColumnType("int");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Exclusive")
                        .HasColumnType("int");

                    b.Property<int>("ForHoliday")
                        .HasColumnType("int");

                    b.Property<int>("ForMembership")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasVoucher")
                        .HasColumnType("bit");

                    b.Property<int>("HourFilter")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(2048)")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PostActionType")
                        .HasColumnType("int");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PromotionType")
                        .HasColumnType("int");

                    b.Property<int>("SaleMode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PromotionId");

                    b.HasIndex("BrandId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("Infrastructure.Models.PromotionChannelMapping", b =>
                {
                    b.Property<Guid>("PromotionChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PromotionChannelId")
                        .HasName("PK_VoucherChannel");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionChannelMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.PromotionStoreMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StoreId");

                    b.ToTable("PromotionStoreMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.PromotionTier", b =>
                {
                    b.Property<Guid>("PromotionTierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int>("TierIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("VoucherGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VoucherQuantity")
                        .HasColumnType("int");

                    b.HasKey("PromotionTierId");

                    b.HasIndex("ActionId");

                    b.HasIndex("ConditionRuleId");

                    b.HasIndex("GiftId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("VoucherGroupId");

                    b.ToTable("PromotionTier");
                });

            modelBuilder.Entity("Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StoreId");

                    b.HasIndex("BrandId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Infrastructure.Models.StoreGameCampaignMapping", b =>
                {
                    b.Property<Guid>("StoreGameCampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("GameCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StoreGameCampaignId")
                        .HasName("StoreGameCampaignMapping_PK");

                    b.HasIndex("GameCampaignId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreGameCampaignMapping");
                });

            modelBuilder.Entity("Infrastructure.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Infrastructure.Models.Voucher", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRedemped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionTierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RedempedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("VoucherGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VoucherId", "VoucherCode")
                        .HasName("PK_Voucher_1");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GameCampaignId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StoreId");

                    b.HasIndex("VoucherGroupId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Infrastructure.Models.VoucherGroup", b =>
                {
                    b.Property<Guid>("VoucherGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Charset")
                        .HasColumnType("varchar(42)")
                        .HasMaxLength(42)
                        .IsUnicode(false);

                    b.Property<int?>("CodeLength")
                        .HasColumnType("int");

                    b.Property<string>("CustomCharset")
                        .HasColumnType("varchar(106)")
                        .HasMaxLength(106)
                        .IsUnicode(false);

                    b.Property<bool>("DelFlg")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(2048)")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.Property<DateTime>("InsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Postfix")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RedempedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UsedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("VoucherGroupId");

                    b.HasIndex("ActionId");

                    b.HasIndex("BrandId");

                    b.HasIndex("GiftId");

                    b.ToTable("VoucherGroup");
                });

            modelBuilder.Entity("Infrastructure.Models.Account", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Account")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Account_Brand");

                    b.HasOne("Infrastructure.Models.Role", "Role")
                        .WithMany("Account")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Action", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Action")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Action_Brand");
                });

            modelBuilder.Entity("Infrastructure.Models.ActionProductMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.Action", "Action")
                        .WithMany("ActionProductMapping")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_ActionProductMapping_Action")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("ActionProductMapping")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ActionProductMapping_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Channel", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Channel")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Channel_Brand");
                });

            modelBuilder.Entity("Infrastructure.Models.ConditionGroup", b =>
                {
                    b.HasOne("Infrastructure.Models.ConditionRule", "ConditionRule")
                        .WithMany("ConditionGroup")
                        .HasForeignKey("ConditionRuleId")
                        .HasConstraintName("FK_ConditionGroup_ConditionRule")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.ConditionRule", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("ConditionRule")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_ConditionRule_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Device", b =>
                {
                    b.HasOne("Infrastructure.Models.Store", "Store")
                        .WithMany("Device")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Device_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.GameCampaign", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("GameCampaign")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Game_Brand")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.GameMaster", "GameMaster")
                        .WithMany("GameCampaign")
                        .HasForeignKey("GameMasterId")
                        .HasConstraintName("FK_GameConfig_GameMaster")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Promotion", "Promotion")
                        .WithMany("GameCampaign")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_GameCampaign_Promotion");
                });

            modelBuilder.Entity("Infrastructure.Models.GameItems", b =>
                {
                    b.HasOne("Infrastructure.Models.GameCampaign", "Game")
                        .WithMany("GameItems")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_GameItems_Game")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Gift", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Gift")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_PostAction_Brand");

                    b.HasOne("Infrastructure.Models.GameCampaign", "GameCampaign")
                        .WithMany("Gift")
                        .HasForeignKey("GameCampaignId")
                        .HasConstraintName("FK_PostAction_GameCampaign");
                });

            modelBuilder.Entity("Infrastructure.Models.GiftProductMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.Gift", "Gift")
                        .WithMany("GiftProductMapping")
                        .HasForeignKey("GiftId")
                        .HasConstraintName("FK_PostActionProductMapping_PostAction")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("GiftProductMapping")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PostActionProductMapping_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.MemberLevel", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("MemberLevel")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_MemberLevel_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.MemberLevelMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.MemberLevel", "MemberLevel")
                        .WithMany("MemberLevelMapping")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_MemberLevelMapping_MemberLevel")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Promotion", "Promotion")
                        .WithMany("MemberLevelMapping")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_MemberLevelMapping_Promotion")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.OrderCondition", b =>
                {
                    b.HasOne("Infrastructure.Models.ConditionGroup", "ConditionGroup")
                        .WithMany("OrderCondition")
                        .HasForeignKey("ConditionGroupId")
                        .HasConstraintName("FK_OrderCondition_ConditionGroup1")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Product", b =>
                {
                    b.HasOne("Infrastructure.Models.ProductCategory", "ProductCate")
                        .WithMany("Product")
                        .HasForeignKey("ProductCateId")
                        .HasConstraintName("FK_Product_ProductCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCategory", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("ProductCategory")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_ProductCategory_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.ProductCondition", b =>
                {
                    b.HasOne("Infrastructure.Models.ConditionGroup", "ConditionGroup")
                        .WithMany("ProductCondition")
                        .HasForeignKey("ConditionGroupId")
                        .HasConstraintName("FK_ProductCondition_ConditionGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.ProductConditionMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.ProductCondition", "ProductCondition")
                        .WithMany("ProductConditionMapping")
                        .HasForeignKey("ProductConditionId")
                        .HasConstraintName("FK_ProductConditionMapping_ProductCondition")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Product", "Product")
                        .WithMany("ProductConditionMapping")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductConditionMapping_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Promotion", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Promotion")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Promotion_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.PromotionChannelMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.Channel", "Channel")
                        .WithMany("PromotionChannelMapping")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("FK_VoucherChannel_Channel")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Promotion", "Promotion")
                        .WithMany("PromotionChannelMapping")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_PromotionChannelMapping_Promotion")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.PromotionStoreMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.Promotion", "Promotion")
                        .WithMany("PromotionStoreMapping")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_PromotionStoreMapping_Promotion")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Store", "Store")
                        .WithMany("PromotionStoreMapping")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_PromotionStoreMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.PromotionTier", b =>
                {
                    b.HasOne("Infrastructure.Models.Action", "Action")
                        .WithMany("PromotionTier")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_Action_PromotionTier");

                    b.HasOne("Infrastructure.Models.ConditionRule", "ConditionRule")
                        .WithMany("PromotionTier")
                        .HasForeignKey("ConditionRuleId")
                        .HasConstraintName("FK_PromotionTier_ConditionRule");

                    b.HasOne("Infrastructure.Models.Gift", "Gift")
                        .WithMany("PromotionTier")
                        .HasForeignKey("GiftId")
                        .HasConstraintName("PromotionTier_FK");

                    b.HasOne("Infrastructure.Models.Promotion", "Promotion")
                        .WithMany("PromotionTier")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_PromotionTier_Promotion");

                    b.HasOne("Infrastructure.Models.VoucherGroup", "VoucherGroup")
                        .WithMany("PromotionTier")
                        .HasForeignKey("VoucherGroupId")
                        .HasConstraintName("FK_PromotionTier_VoucherGroup");
                });

            modelBuilder.Entity("Infrastructure.Models.Store", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Store")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Store_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.StoreGameCampaignMapping", b =>
                {
                    b.HasOne("Infrastructure.Models.GameCampaign", "GameCampaign")
                        .WithMany("StoreGameCampaignMapping")
                        .HasForeignKey("GameCampaignId")
                        .HasConstraintName("StoreGameCampaignMapping_FK_1")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Store", "Store")
                        .WithMany("StoreGameCampaignMapping")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("StoreGameCampaignMapping_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Transaction", b =>
                {
                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("Transaction")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Transaction_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Voucher", b =>
                {
                    b.HasOne("Infrastructure.Models.Channel", "Channel")
                        .WithMany("Voucher")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("FK_Voucher_Channel");

                    b.HasOne("Infrastructure.Models.GameCampaign", "GameCampaign")
                        .WithMany("Voucher")
                        .HasForeignKey("GameCampaignId")
                        .HasConstraintName("FK_Voucher_GameCampaign");

                    b.HasOne("Infrastructure.Models.Membership", "Membership")
                        .WithMany("Voucher")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("FK_Voucher_Membership");

                    b.HasOne("Infrastructure.Models.Promotion", "Promotion")
                        .WithMany("Voucher")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_Voucher_Promotion");

                    b.HasOne("Infrastructure.Models.Store", "Store")
                        .WithMany("Voucher")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Voucher_Store");

                    b.HasOne("Infrastructure.Models.VoucherGroup", "VoucherGroup")
                        .WithMany("Voucher")
                        .HasForeignKey("VoucherGroupId")
                        .HasConstraintName("FK_Voucher_VoucherGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.VoucherGroup", b =>
                {
                    b.HasOne("Infrastructure.Models.Action", "Action")
                        .WithMany("VoucherGroup")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_VoucherGroup_Action");

                    b.HasOne("Infrastructure.Models.Brand", "Brand")
                        .WithMany("VoucherGroup")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_VoucherGroup_Brand")
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Gift", "Gift")
                        .WithMany("VoucherGroup")
                        .HasForeignKey("GiftId")
                        .HasConstraintName("FK_VoucherGroup_PostAction");
                });
#pragma warning restore 612, 618
        }
    }
}
